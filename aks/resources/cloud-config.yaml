#cloud-config
ssh_authorized_keys:
#brianmoore
- ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+HxnuN1D7vtkxABtAxRizT2RrUha45M3qBABWKBJAEJqev9gUC0zRxAwW6Eh8lhfv9jKcnekMkOZNPrR/Bx5cuv0hACDxF4nb2trcFTK2IOuaGidk3zld71jQYDnpVes9BSqcMkn9nmx8Nl7p5KPt1foTSezdZq/neiOZ/vV5r8iPmSOwxigYFP2G70P2dMFTY+KyoWDk60WAjr2g6EHSdI4GgR6kghgMAcVuljnseDJVLmYn8I/B2FSXH7APtd0h6J673S8wPZuNzIEYzm/KEobBn0EpnhyqfOjN5VLdNOUGpXb/VPNXeKaB3KoOzEh20FkaVJmNXlN0WKC1hyCl brian@DESKTOP-SFIVOEU
package_upgrade: true
packages:
#Install packages needed to use the Kubernetes apt repository:
- apt-transport-https
- ca-certificates
- curl
write_files:
# - path: /etc/sysctl.d/11-aks-engine.conf
#   permissions: "0644"
#   owner: root
#   content: |
#     net.core.message_burst = 80
#     net.core.message_cost = 40
#     net.core.somaxconn = 16384
#     net.ipv4.neigh.default.gc_thresh1 = 4096
#     net.ipv4.neigh.default.gc_thresh2 = 8192
#     net.ipv4.neigh.default.gc_thresh3 = 16384
#     net.ipv4.tcp_max_syn_backlog = 16384
#     net.ipv4.tcp_retries2 = 8
#     #EOF
- path: /etc/environment
  #Suppress Warning: apt-key output should not be parsed (stdout is not a terminal)
  content: |
    APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE="1"
  append: true
  #Script which gets run before starting kubelet
# - path: /opt/azure/containers/kubelet.sh
#   permissions: '0755'
#   owner: root
#   content: |
#     #!/bin/bash
#     set -e
#     MOUNT_DIR=/var/lib/kubelet
#     mkdir -p $MOUNT_DIR /var/lib/cni
#     if ! [[ $(findmnt -rno SOURCE,TARGET $MOUNT_DIR) ]]; then
#       mount --bind $MOUNT_DIR $MOUNT_DIR
#     fi
#     mount --make-shared $MOUNT_DIR
#     iptables -I FORWARD -d 168.63.129.16 -p tcp --dport 80 -j DROP
#     #EOF
# #Environment variables to pass to kubelet
# - path: /etc/default/kubelet
#   permissions: \"0644\"
#   owner: root
#   content: |
#     KUBELET_CONFIG=--address=0.0.0.0 --anonymous-auth=false --authentication-token-webhook=true --authorization-mode=Webhook --azure-container-registry-config=/etc/kubernetes/azure.json --cgroups-per-qos=true --client-ca-file=/etc/kubernetes/certs/ca.crt --cloud-config=/etc/kubernetes/azure.json --cloud-provider=azure --cluster-dns=10.0.0.10 --cluster-domain=cluster.local --enforce-node-allocatable=pods --event-qps=0 --eviction-hard=memory.available<750Mi,nodefs.available<10%,nodefs.inodesFree<5% --feature-gates=RotateKubeletServerCertificate=true --healthz-port=10248 --image-gc-high-threshold=85 --image-gc-low-threshold=80 --image-pull-progress-deadline=30m --keep-terminated-pod-volumes=false --kubeconfig=/var/lib/kubelet/kubeconfig --max-pods=30 --network-plugin=cni --node-status-update-frequency=10s --non-masquerade-cidr=0.0.0.0/0 --pod-infra-container-image=mcr.microsoft.com/oss/kubernetes/pause:1.4.1 --pod-manifest-path=/etc/kubernetes/manifests --pod-max-pids=-1 --protect-kernel-defaults=true --read-only-port=0 --register-with-taints=node-role.kubernetes.io/master=true:NoSchedule --resolv-conf=/run/systemd/resolve/resolv.conf --rotate-certificates=true --streaming-connection-idle-timeout=4h --tls-cert-file=/etc/kubernetes/certs/kubeletserver.crt --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256 --tls-private-key-file=/etc/kubernetes/certs/kubeletserver.key --v=2 --volume-plugin-dir=/etc/kubernetes/volumeplugins 
#     KUBELET_NODE_LABELS=kubernetes.azure.com/role=master,node.kubernetes.io/exclude-from-external-load-balancers=true,node.kubernetes.io/exclude-disruption=true,kubernetes.azure.com/cluster=',variables('labelResourceGroup'),'
#     #EOF

# #Configuration for kubelet.service
# - path: /etc/systemd/system/kubelet.service
#   permissions: '0644'
#   content: |
#     [Unit]
#     Description=Kubelet
#     Documentation=https://github.com/kubernetes/kubernetes
#     After=containerd.service
#     Requires=containerd.service
#     ConditionPathExists=/usr/local/bin/kubelet

#     [Service]
#     Restart=always
#     EnvironmentFile=/etc/default/kubelet
#     SuccessExitStatus=143
#     ExecStartPre=/bin/bash /opt/azure/containers/kubelet.sh
#     ExecStart=/usr/local/bin/kubelet \
#             --node-labels="$KUBELET_NODE_LABELS" \
#             $KUBELET_CONFIG
#     [Install]
#     WantedBy=multi-user.target
# kubeadm config file
- path: /etc/kubeadm/config.yaml
  permissions: '0644'
  encoding: gzip
  content: !!binary |
    ${configs_kubeadm}
#Make sure that the overlay and br_netfilter module is loaded
- path: /etc/modules-load.d/k8s.conf
  permissions: '0644'
  content: |
    overlay
    br_netfilter
#As a requirement for your Linux Node's iptables to correctly see bridged traffic, you should ensure net.bridge.bridge-nf-call-iptables is set to 1 in your sysctl config
- path: /etc/sysctl.d/k8s.conf
  permissions: '0644'
  content: |
    net.bridge.bridge-nf-call-ip6tables = 1
    net.bridge.bridge-nf-call-iptables  = 1
    net.ipv4.ip_forward                 = 1
%{ if node_type == "master" ~}
#Manifests
#The addon manager will apply the addons to the cluster and maintain their state
# - path: /etc/kubernetes/manifests/kube-addon-manager.yaml
#   permissions: '0644'
#   encoding: gzip
#   content: !!binary |
#     ${ manifests_kube_addon_manager }
#Addons
# - path: /etc/kubernetes/addons/kube-proxy.yaml
#   permissions: "0644"
#   encoding: gzip
#   owner: root
#   content: !!binary |
#     ${ "addons_kube_proxy" }
%{ endif ~}
runcmd:
#Set up dependencies
- [ modprobe, overlay ]
- [ modprobe, br_netfilter ]
#Apply the /etc/sysctl.d/k8s.conf config file to enable IP forwarding and netfilter settings across reboots
- [ sysctl, --system ]
#Add a new repository for the cri-o software
- [ sh, -c, 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${ crio_version }/${ crio_os_version }/ / | tee -a /etc/apt/sources.list.d/cri-0.list' ]
#Add the package key for the cri-o software
- [ sh, -c, 'curl -L http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${ crio_version }/${ crio_os_version }/Release.key | apt-key add -' ]
#Add the repository for libcontainer information
- [ sh, -c, 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${ crio_os_version }/ / | tee -a /etc/apt/sources.list.d/libcontainers.list' ]
#Add the package key for libcontainer information
- [ sh, -c, 'curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/${ crio_os_version }/Release.key | apt-key add -' ]
#Install cri-io and runc
- [ apt-get, install, -y, cri-o, cri-o-runc ]
- [ systemctl, daemon-reload ]
- [ systemctl, enable, crio ]
- [ systemctl, start, crio ]
#Ensure cr-io is running
- [ systemctl, status, crio ]
#Add the Kubernetes apt repository:
- [ sh, -c, 'echo deb https://apt.kubernetes.io/ kubernetes-xenial main | tee -a /etc/apt/sources.list.d/kubernetes.list' ]
#Download the Google Cloud public signing key
- [ sh, -c, 'curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -' ]
- [ apt-get, install, -y, kubelet=1.20.4-00, kubeadm=1.20.4-00, kubectl=1.20.4-00 ]
- [ apt-mark, hold, kubelet, kubeadm, kubectl ]
%{ if node_type == "master" ~}
#If this is a master node, grab the certs we need
- [ mkdir, -p, /etc/kubernetes/pki/etcd ]
- [ cp, /var/lib/waagent/${certificates["ca-kubernetes"]}.crt, /etc/kubernetes/pki/ca.crt ]
- [ cp, /var/lib/waagent/${certificates["ca-kubernetes"]}.prv, /etc/kubernetes/pki/ca.key ]
- [ cp, /var/lib/waagent/${certificates["ca-etcd"]}.crt, /etc/kubernetes/pki/etcd/ca.crt ]
- [ cp, /var/lib/waagent/${certificates["ca-etcd"]}.prv, /etc/kubernetes/pki/etcd/ca.key ]
- [ cp, /var/lib/waagent/${certificates["ca-kubernetes-front-proxy"]}.crt, /etc/kubernetes/pki/front-proxy-ca.crt ]
- [ cp, /var/lib/waagent/${certificates["ca-kubernetes-front-proxy"]}.prv, /etc/kubernetes/pki/front-proxy-ca.key ]
#Initialize the cluster
- [ sh, -c, 'kubeadm init --config /etc/kubeadm/config.yaml' ]
#- [ kubectl, apply, -f https://raw.githubusercontent.com/Azure/acs-engine/master/parts/k8s/addons/kubernetesmasteraddons-azure-npm-daemonset.yaml ]
- [ mkdir, -p, /home/${admin_username}/.kube ]
- [ cp, /etc/kubernetes/admin.conf, /home/${admin_username}/.kube/config ]
- [ chown, '${admin_username}:${admin_username}', /home/${admin_username}/.kube/config ]
%{ else ~}
#Join the worker to the cluster
- [ sh, -c, 'kubeadm join --config /etc/kubeadm/config.yaml']
%{ endif ~}
#Set up rules to Source NAT anything not destined for the landing zone vnet CIDR
#- [ sh, -c, 'iptables -t nat -A POSTROUTING -m iprange ! --dst-range 168.63.129.16 -m addrtype ! --dst-type local ! -d ${vnet_cidr} -j MASQUERADE' ]
#sudo kubectl apply -f https://raw.githubusercontent.com/Azure/acs-engine/master/parts/k8s/addons/kubernetesmasteraddons-azure-npm-daemonset.yaml
#kubectl apply -f https://raw.githubusercontent.com/Azure/azure-container-networking/master/npm/azure-npm.yaml